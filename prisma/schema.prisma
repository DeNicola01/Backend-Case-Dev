generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  age           Int
  isActive      Boolean
  familyProfile String
  plannings     Planning[]
  movements     Movement[] @relation("CustomerMovements")
  insurances Insurance[] @relation("CustomerInsurances")
}

model Planning {
  id            String     @id @default(uuid())
  customerId    String
  targetValue   Float
  targetDate    DateTime
  portfolioJson Json
  totalAssets   Float
  plannedAssets Float
  goalName      String
  goalType      GoalType
  createdAt     DateTime   @default(now())
  updatedAt DateTime @updatedAt @default(now())
  customer      Customer   @relation(fields: [customerId], references: [id])
  movements     Movement[]
}

model Movement {
  id          String       @id @default(uuid())
  planningId  String
  customerId  String
  type        MovementType
  value       Float
  frequency   Frequency
  date        DateTime
  planning    Planning     @relation(fields: [planningId], references: [id])
  customer    Customer     @relation(fields: [customerId], references: [id], name: "CustomerMovements")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum MovementType {
  positive
  negative
}



enum GoalType {
  retirement
  short_term
  medium_term
}

enum Frequency {
  one_time
  monthly
  yearly
}

model Insurance {
  id           String   @id @default(uuid())
  customerId   String
  customer Customer @relation(fields: [customerId], references: [id], name: "CustomerInsurances")
  type         String   // "vida" | "invalidez"
  value        Float
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

